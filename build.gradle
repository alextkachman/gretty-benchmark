/*
* Copyright 2009-2010 MBTE Sweden AB.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

apply plugin: 'groovy'
apply plugin: 'idea'

gppVersion = "0.4.113"

repositories {
  mavenRepo urls: 'http://groovypp.artifactoryonline.com/groovypp/libs-releases-local/'

  mavenCentral ()
  mavenRepo urls: 'http://repository.jboss.org/nexus/content/groups/public/'
}

dependencies {
    groovy group: 'org.mbte.groovypp', name: 'groovypp', version: "$gppVersion"

    compile group: 'org.mbte.groovypp', name: 'groovypp', version: "$gppVersion"
    compile group: 'org.mbte.groovypp', name: 'gretty', version: "0.4.118"
    compile group: 'com.amazonaws', name: 'aws-java-sdk', version: "1.1.0"
    runtime(group: 'commons-cli', name: 'commons-cli', version: '1.1')

}

task run(type:JavaExec, dependsOn:'classes') {
    main = 'org.mbte.gretty.examples.SimpleServer'
    classpath =  sourceSets.main.runtimeClasspath
    jvmArgs = ['-server',  '-Xms4096m', '-Xmx4096m']
}

task load(type:JavaExec, dependsOn:'classes') {
    main = 'org.mbte.gretty.examples.LoadClient'
    classpath =  sourceSets.main.runtimeClasspath
    jvmArgs = ['-server',  '-Xms4096m', '-Xmx4096m']
}

task env(dependsOn:'classes') {
    def gcl = new GroovyClassLoader()
    def classpath
    for(f in sourceSets.main.runtimeClasspath.files) {
        if(!classpath)
            classpath = f.absolutePath
        else
            classpath = classpath + ':' + f.absolutePath
        gcl.addClasspath f.absolutePath
    }

    File credentialsFile = [System.getProperty('user.home') + '/.aws/credentials']
    if(!credentialsFile.exists()) {
        throw new IOException(credentialsFile.absolutePath)
    }

    def awsCredentials = gcl.loadClass('com.amazonaws.auth.PropertiesCredentials').newInstance(credentialsFile)
    def awsClient = gcl.loadClass('com.amazonaws.services.ec2.AmazonEC2AsyncClient').newInstance(awsCredentials)

    String role
    Process activeProcess

    def ip = InetAddress.localHost.hostAddress

    def startRole = { String r ->
        println "Starting role '$r'"
        def cmd = "/usr/bin/java -cp $classpath -server -Xmx4096m -Xms4096m org.mbte.gretty.examples.SimpleServer".toString()
        println cmd
        def process = cmd.execute()
        process.consumeProcessOutputStream(System.out)
        process.consumeProcessErrorStream(System.err)
    }

    def stopRole = { String r ->
        if(r) {
            println "Stopping role '$r'"
        }
    }

    for(;;) {
        def instances = awsClient.describeInstances()
        def myRole = ''
        for(r in instances.reservations) {
            for(i in r.instances) {
              if(ip == i.privateIpAddress) {
                  println "I am $i.privateIpAddress $i.tags"
                  for(t in i.tags) {
                      if(t.key.equalsIgnoreCase('role')) {
                          myRole = t.value
                      }
                  }
              }
            }
        }

        if(myRole == '') {
            myRole = 'server'
        }

        myRole = myRole.toLowerCase()
        if(myRole != role) {
            stopRole(role)
            role = myRole
            startRole(role)
        }

        Thread.sleep 15000
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '0.9-rc-3'
}
